java criteria builder in count

CriteriaQuery<Long> c = cb.createQuery(Long.class);
Root<MedioContacto> mc = c.from(MedioContacto.class);
c.select(cb.count(mc));
List<Predicate> predicates = new ArrayList<Predicate>();
    predicates.add(cb.equal(mc.get("entidad"), idEntidad));
    predicates.add(cb.equal(mc.get("tipo"), 55));
c.where(predicates.toArray(new Predicate[]{}));
Integer cantidadMediosContacto = this.entityManager.createQuery(c).getSingleResult().intValue();




RestClientConfiguration config = RestClientConfiguration.loadConfiguration("jasperserver.properties");;
			JasperserverRestClient client = new JasperserverRestClient(config);
			Session session = client.authenticate("jasperadmin", "jasperadmin");


			ReportExecutionRequest reportExecRequest = new ReportExecutionRequest();

			reportExecRequest.setReportUnitUri("/reports/historicoVentas");
			reportExecRequest.setAsync(true);
			reportExecRequest.setFreshData(false);
			reportExecRequest.setSaveDataSnapshot(false);
			reportExecRequest.setOutputFormat(ReportOutputFormat.XLSX);
			reportExecRequest.setInteractive(true);
			reportExecRequest.setIgnorePagination(false);
			
			ReportExecutionDescriptor entity = session
			        .reportingService()
			        .newReportExecutionRequest(reportExecRequest)
			        .getEntity();


			String expId = entity.getExports().get(0).getId();
			String reqId = entity.getRequestId();

			logger.info(session.getStorage().getSessionId());
			String status=null;

			times=0;
			while(times<100 && !status.equalsIgnoreCase(ExecutionStatus.ready.toString())) 
			{
				TimeUnit.SECONDS.sleep(5);
				status = session.reportingService()
				        .reportExecutionRequest(reqId)
				        .export(expId)
				        .status()
				        .getEntity()
				        .getValue();
				times++;
			}
			
			if(times>=10 && !status.equalsIgnoreCase(ExecutionStatus.ready.toString()))
			{
				this.jsfMessageSender.sendErrorMessage(BundleMessage.Error.UNDEFINED_ERROR);
			}
			
	        
	        OperationResult<InputStream> operationResult =
	                session
	                        .reportingService()
	                        .reportExecutionRequest(reqId)
	                        .export(expId)
	                        .outputResource();

	        InputStream file = operationResult.getEntity();
			
	        
	        FacesContext facesContext = FacesContext.getCurrentInstance();
			ExternalContext externalContext = facesContext.getExternalContext();
			externalContext.responseReset();
			externalContext.setResponseContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			externalContext.setResponseHeader("Content-Disposition",
					"attachment; filename=" +"HistoricoVentas"+ "\\.xlsx");
			OutputStream out = externalContext.getResponseOutputStream();
			IOUtils.copy(file,out);
			facesContext.responseComplete();
			out.flush();
			out.close();


//consulta de JPa agregando  criterios al on de las relaciones JPA 
select 
new co.inv.commons.TurnoPersonaDTO(tp.idTurnoPersona,
									t.idTurno,
									t.turno,
									tp.idEntidadLogueada, 
									tp.idPersona,
									tp.idOpcion,
									tp.created,
									tp.createdBy,
									tp.updated,
									tp.updatedBy) 
from TurnosPersona tp 
inner join tp.turno t
join t.parqueaderosYZona pyz on (pyz.idParqueadero=:idParqueadero)
where 
tp.idPersona= :entidadLogueada
and tp.idOpcion= :idOpcion
and t.idTurno not in (select tt.idTurno	
					  from TurnosPersona tpp 
					  inner join tpp.turno tt 
					  where tpp.idPersona= :entidadSeleccionada)


----------------------------------------------------------------
---info of JAX-WS
 Una implementación de un servicio Web JAX-WS reside en un contenedor Web, y por lo tanto puede desplegarse en un servidor Web 	 
o un servidor de aplicaciones, una implementación EJB, en cambio, reside en un contenedor EJB y sólo podrá desplegarse en un 
servidor de aplicaciones.

La plataforma Java EE 6, soporta las siguientes implementaciones de servicios Web: como un componente Web JAX-WS en un contenedor de 
Servlets, y como un componente EJB de sesión stateless o singleton.


---continuar leyendo 
